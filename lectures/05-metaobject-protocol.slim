= slide 'Метапрограмиране' do
    p Metaprogramming is the writing of computer programs that write or manipulate other programs (or themselves) as their data, or that do part of the work at compile time that would otherwise be done at runtime.

= slide 'Метапрограмиране' do
    ul
        li.action Зората на времето - asm
        li.action Малко след зората на времето - Lisp
        li.action C - макроси (далеч не толкова мощни)
        li.action C++ - templates
        li.action Python?

= slide 'Мета-обектен протокол' do
    p В Python ще го срещнете като data model

= slide 'Какво знаем до тук?' do
    list:
        Всичко е обект.
        Всеки обект си има уникален номер, който можем да видим с id()
        Сравнението дали две имена сочат към един и същи обкет става с оператора is
        Всеки обект си има тип, който можем да проверим с type()
        Типовете са в йерархия
        Някои обекти могат да бъдат променяни, а други - не.
        Някои обекти могат да бъдат извикване, а други - не.

    p Време е да обясним как точно работят всички тези неща.

= slide 'Дъндъри' do
    p Както знаете, всеки обект има такива неща, които са със специално значение за него.


= slide '__class__' do
    ul
        li.action Всяко нещо в езика е обект
        li.action Всеки обект си има тип/клас
        li.action Тази информация се пази в `__class__`
        li.action Класът на този клас също си има __class__ (тъй като също е обект)
        li.action Стойността на __class__ може да се променя

= slide 'Разни' do
    ul
        li.action __bases__
        li.action __slots__
        li.action __doc__

= slide '__dict__' do
    list:
        Всеки обект в езика се държи като речник/hash/dict.
        Когато сетваме/достъпваме даден атрибут, Python рови в речника на този обект.
        Този речник е достъпен чрез `__dict__` атрибута.
        Вградените типове (тези, за които има литерали) нямат такъв.

    .action
        annotate:
            def spam(): pass
            spam.foo = 8
            print(spam.__dict__)
            spam.__dict__['bar'] = 2
            print(spam.bar)

= slide 'Методи, обекти, класове и имена' do
    ul
        li.action Функциите са обекти
        li.action Методите са обекти
        li.action Методите са атрибути на класа
        li.action Това обяснява защо именованото пространство на променливи, функции и класове е едно и също.

= slide 'Aтрибути' do
    ul
        li.action getattr(obj, 'name')
        li.action setattr(obj, 'name', value)
        li.action del obj.name

= slide 'Достъпване на атрибути' do
    ul
        li.action Когато се опитате да достъпите атрибут на даден обект, се вика `__getattribute__`.
        li.action `__getattribute__` проверява в `__dict__` на текущия обект и на неговите родители.
        li.action Ако този атрибут не съществува в никое от тези места, се вика `__getattr__`.
        li.action Очевидно, те могат да се предефинират.
        li.action Счита се, че не е особено добра идея да се предефинира `__getattribute__`.

    annotate:
        class Foo:
            bar = 1
            def __getattribute__(self, name):
                if name == 'foo':
                    return 8
                return super().__getattribute__(name)

            def __getattr__(self, name):
                return name

        foo = Foo()
        print(foo.bar)
        print(foo.foo)
        print(foo.baba)

= slide 'Други операции с атрибути' do
    p __setattr__
    p __delattr__
