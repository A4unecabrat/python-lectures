= slide 'Метакласове' do
    ul
        li всичко в Пайтън е обект, включително и класовете
        li всеки обект е инстанция на някакъв клас, включително и класовете
        li класовете на класовете си имат специално име - метакласове
        li има един стандартен метаклас - type

= slide 'Забележка' do
    p В Пайтън type значи няколко неща
    ul
        li с един аргумент type(x) връща типа на x
        li без аргументи е просто класът type
        li с три аргумента се конструира инстанция на type

= slide 'Типът на типовете' do
    p Класовете са просто инстанции на type.

    example:
        type(name, bases, dict)

    ul
        li name - име на новия клас
        li bases - tuple с базовите му класове
        li dict - речник с полетата му (не по-различно от __dict__)

= slide 'Начини да направим клас' do
    div.action
        example:
            Foo = type('Foo', (A, B, C), {'x':1, 'y':2})

    p.action Долното е синтактична захар за горното...
    div.action
        example:
            class Foo(A, B, C):
                x = 1
                y = 2

= slide 'Мета' do
    ul
        li type е тип и си има конструктор
        li type може да бъде наследен
        li няма причина следното да не работи...

    example:
        class metacls(type):
             def __new__(mcs, name, bases, dict):
                 dict['foo'] = 'metacls was here'
                 return type.__new__(mcs, name, bases, dict)

        Foo = metacls('Foo', (A, B, C), {'x':1, 'y':2})
        type(Foo) # metacls

= slide 'Мета със захар' do
        example:
            class Foo(A, B, C, metaclass=metacls):
                x = 1
                y = 2

= slide 'Tim Peters on metaclasses' do
    p [Metaclasses] are deeper magic than 99% of the users should ever worry about. If you wonder whether you need them, you don't (the people who actually need them know with certainty that they need them, and don't need an explanation about why).
    p — Tim Peters

= slide '__prepare__' do
    list:
        Това е classmethod
        Той се вика преди всичко друго
        Трябва да върне обект от тип dict
        Той ще се използва вместо __dict__

    example:
      class MyDict(dict):
        pass

      class Foo(type):
        @classmethod
        def __prepare__(self, name, bases):
            return MyDict()

= slide '__annotate__' do
    list:
      Можем да дадем тип на аргумент на функция
      Но това няма никакво значение

    example:
      def foo(x: int, y: string):
        pass

= slide 'Multiple Dispatch' do
    p Кодът, който разглеждахме през първия час можете да намерите тук:
    p http://pythonmulti.codeplex.com/releases/view/43090

= slide 'Design by contract' do
    p Кодът, който разглеждахме през втория час можете да намерите тук:
    p http://pythondbc.codeplex.com/releases/view/42938
