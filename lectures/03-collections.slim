= slide 'Искаме да дефинираме клас за умен човек. Как ще го кръстим?' do
    p a) smart_person
    p b) SMART_PERSON
    p c) smartPerson
    p d) SmartPerson
= slide 'Какво прави self?' do
    p.action Само чрез него методите имат достъп до полетата на обекта

= slide 'Как можем да предефинираме държанието на >?' do
    p.action Като дефинираме метод __gt__(self, other)

= slide 'Как можем да дефинирираме кастване към int?' do
    p.action Като дефинираме __int__(self)

= slide 'Какво не можем да направим в тялото на lambda?' do
    ul
        li.action Да хвърлим изключение
        li.action Да присвоим стойност

= slide 'I\'ve got 99 problems.' do
    p Когато не знаем какво да правим с данните, ги слагаме в колекции.
    ul
        li list = array = масив = стойности с определена подредба
        li dict = стойности с име, без подредба
        li set = стойности без повтаряне и без подредба
        li tuple = кратък брой стойности, обикновено лека алтернатива на обект

= slide 'Какво е колекция?' do
    ul
        li.action В Python всички колекциите са итерируеми (iterable)
        li.action Iterable има методите __iter__() и евентуално __getitem__(index)
        li.action iter(iterable) връща итератор - протокол за обхождане на колекции
        li.action Итераторите имат един метод - next() - който връща следващия елемент, докато свършат

= slide 'range' do
    p range връща итеруемо
    annotate:
        numbers = range(3)
        iterator = iter(numbers)

        next(iterator) # 0
        next(iterator) # 1
        next(iterator) # 2
        next(iterator) # StopIteration

= slide 'Заигравка с итеруеми' do
    p Итераторите могат да се итерират
    annotate:
        numbers = [1, 2, 3]
        iter(numbers) is iter(numbers) # False

        iterator = iter(numbers)
        iter(iterator) is iterator # True

= slide 'Ако трябва да съм честен, говоря за неделя сутринта' do
    p Ако искате опашка (queue, FIFO buffer) можете да ползвате списък?
    annotate:
        orders = []

        def add_order(items):
            orders.append(items)

        def get_order():
            return orders.pop(0)

        add_order(('бира', 'шкембе'))
        add_order(('цаца', 'картофки'))

        print(get_order().join('; ')) # бира, шкембе


= slide 'Влизат collections' do
    ul
        li deque - оптимизирани опашки
        li OrderedDict - речник, който помни реда
        li defaultdict - речник със стойност по подразбиране
        li Counter - set, който брои повтарящи се стойности

= slide '52 пъти в годината' do
    annotate:
        from collections import deque
        orders = deque()

        def add_order(items):
            orders.append(items)

        def get_order():
            return orders.popleft()

        add_order(('бира', 'шкембе'))
        add_order(('цаца', 'картофки'))

        print(get_order().join('; ')) # бира, шкембе

= slide 'броим лоши думи' do
    annotate:
        bad_words = ['x','y','z']

        def count_bad_words(text):
            word_counts = {}
            for word in text.split(' '):
                if word in bad_words:
                    if word in word_counts:
                        word_counts[word] += 1
                    else:
                        word_counts[word] = 1

            return word_counts

= slide 'defauldict' do
    p Речник със стойност по подразбиране
    annotate:
        from collections import defaultdict
        bad_words = ['x','y','z']

        def count_bad_words(text):
            word_counts = defaultdict(int)
            for word in text.split(' '):
                word_counts[word] += 1

            return word_counts

    p Още по-лесно - collections.Counter.

= slide 'map/filter/reduce' do
    ul
        li.action map(function, iterable) обхожда колекция и създава нова колекция с резултата на function върху всеки елемент
        li.action filter(function, iterable) създава колекция само с елементите, за които function върне True
        li.action reduce(function, iterable) вика function с елементите на колекцията, докато сведе всичко до една стойност

= slide 'Comprehensions' do
    ul
        li Изрази, които генерират колекции
        li Елегантен заместител на map и/или filter
        li Колекциите могат да са динамични

= slide 'List comprehension' do
    annotate:
        [израз for променлива in поредица if условие]

        >>> [x * x for x in range(0, 10)]
        [1, 4, 9, 16, 25, 36, 49, 64, 81]

        >>> [x * x for x in range(0, 10) if x % 2]
        [1, 9, 25, 49, 81]

= slide 'List comprehension' do
    p Един list comprehension може да се вложи в друг
    annotate:
        >>> [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
        [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]

= slide 'Generator expression' do
    ul
        li.action Кръгли скоби вместо квадратни
        li.action Като list comprehension, но се изпълнява динамично
        li.action Всяка стъпка на итератора изпълнява отново map и filter изразите

= slide 'Set comprehension' do
    ul
        li Като list comprehension, но с { }

    annotate:
        >>> import math
        >>> {int(math.sqrt(x)) for x in range(1,100)}
        {1, 2, 3, 4, 5, 6, 7, 8, 9}

= slide 'Dict comprehension' do
    annotate:
        >>> {i : chr(65+i) for i in range(10)}
        {0: 'A', 1: 'B', 2: 'C', 3: 'D', 4: 'E', 5: 'F', 6: 'G', 7: 'H', 8: 'I', 9: 'J'}


= slide 'itertools' do
    annotate:
        >>> import itertools
        >>> help(itertools)
