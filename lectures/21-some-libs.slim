= slide 'Полезни щуротии в стандартната библиотека,' do
  p ... които може би сте виждали.

= slide 'datetime' do
  p datetime е модул, който ви дава основна функционалност за дати

  list:
    datetime.date(year, month, day) - клас за дата
    datetime.time(hour, minute, second, microsecond, tzinfo=None) - клас за време
    datetime.datetime(...) - клас за дата и време
    datetime.timedelta - разлика м/у datetime.datetime

  p.action ... ама това трябва да сте го виждали вече.

= slide 'os' do
  p os - функционалност от операционната система
  p os.path - функционалност за работа с пътища във файловата система

  list:
    os.system(command) - изпълнява командата
    os.getcwd() - дава текущата директория
    os.chdir(path) - сменя текущата директория
    os.listdir(path) - дава съдържанието на директорията
    os.makedirs(path) - създава директория и родители
    os.remove(path) - трие файл
    os.rmdir(path) - трие празна директория
    os.stat(path) - данни за файла
    os.walk(path) - ходи из разни неща
    os.path.exists(path) - проверява дали нещото съществува
    os.path.isdir(path)- проверява дали нещото е директория

  p.action ... ама и това сте го виждали по време на семестъра

= slide 'json' do
  p Нещо, което може би не сме ви показали

  p.action json е модул, който може да сериализира прости Python обекти.

  list:
    json.dump(object, file) - Приема binary отворен за писане файл file и Python обект object. Записва обекта в файла.
    json.load(file) - Приема binary отворен за четене файл и прочита един обект, който е и резултат от функцията
    json.dumps(object) - връща низ
    json.loads(str) - връща обект от низ

= slide 'Ако ще си говорите с код на C' do
  list:
    ctypes
    bytes
    struct

= slide 'И още...' do
  list:
    configparser - модул за обработка на конфигурационни файлове
    getopt - parser за опции от командния ред
    StringIO - буфер, който създава стабилното впечатление, че е файл
    xml.dom.minidom - ако някой ви е излъгал, че работата с DOM дървета е яка
    html.parser - парсва html
    hashlib - хешира разни неща с md5, sha1, sha256, sha512...
    logging - логва разни неща
    email - праща разни мейли

= slide 'Архивиране и компресия' do
  list:
    zlib
    gzip
    bz2
    zipfile
    tarfile

= slide 'Сега към малко по-забавни неща,' do
  p ... коити няма да намерите в стандартната библиотека

= slide 'requests - HTTP for humans' do
  p Преди това да обясним какъв му е проблемът на urllib

  p.action Да речем, че правим някакви заявки към някакво API и си казваме какво ни връща
  p.action Имайки urllib, в стандартната библиотека ще направим ей така:

= slide '' do
  example:
    import urllib.request
    import urllib.error
    import urllib.parse

    gh_url = 'https://api.github.com'

    req = urllib.request.Request(gh_url)

    password_manager = urllib.request.HTTPPasswordMgrWithDefaultRealm()
    password_manager.add_password(None, gh_url, 'user', 'pass')

    auth_manager = urllib.request.HTTPBasicAuthHandler(password_manager)
    opener = urllib.request.build_opener(auth_manager)

    urllib.request.install_opener(opener)

    handler = urllib.request.urlopen(req)

    print(handler.getcode())
    print(handler.getheader('content-type'))

  p Не трябваше ли нещата в Python да са кратки и лесни?

= slide 'В питонски стил' do
  example:
    import requests

    r = requests.get('https://api.github.com', auth=('user', 'pass'))

    print(r.status_code)
    print(r.headers['content-type'])

= slide 'Идва си с цялата каруца' do
  example:
    > pip install requests

  list:
    International Domains and URLs
    Keep-Alive & Connection Pooling
    Sessions with Cookie Persistence
    Browser-style SSL Verification
    Basic/Digest Authentication
    Elegant Key/Value Cookies
    Automatic Decompression
    Unicode Response Bodies
    Multipart File Uploads
    Connection Timeouts
    .netrc support
    Thread-safe.

= slide 'Celery' do
    p Celery е дистрибутирана опашка за задачи
    
    list:
        * Опашките за задачи се използват за разпределяне на работа между нишки и машини
        * Задачите им са да:
            * Приемат единици работа (tasks)
            * Разпределят работата на worker процеси
            * Постоянно следят за нова работа и състоянието на worker-ите
    p Сelery e използва външна система за подаване на съобщения и я използва за да координира "клиенти" и "worker"-и.
    p За да се свърши някаква работа "клиент" пуска задача в опашката и системата за подаване на съобщения доставя задачата до worker. Една Celery система обикновено се състои от много много worker-и и системи за подаване на съобщения което прави скалирането на приложението много лесно, а и го прави много надеждно

= slide 'Какво ви трябва' do
    list:
        Приложение което трябва да върши много работа паралелно
        Система за подаване на съобщения (Message broker)
        Препоръчва се RabbitMQ
        Възможно е и с SQL база данни, Redis, MongoDB

    example:
        from celery import Celery

        # Първият аргумент трябва да е името на сегашния модул
        # Вторият аргумент е адреса на диспечера на съобщения
        celery = Celery('hello', broker='amqp://guest@localhost//')

        @celery.task
        def answer_to_the_question_of_life_universe_and_everything():
            return 42

= slide 'Performance' do
    list:
        Celery спокойно може да обработва милиони задачи в минута
        Worker-ите и клиентите автоматично пробват отново при загуба на мрежа или други проблеми
        Почти всяка част от Celery може да бъде наследена и нагодена до вашите нужди
        Интегрира се лесно с Django
= slide 'urwid' do
  example:
    pip install urwid
  p urwid е библиотека за конзолни GUI-та
  p Съдържа всичко което ви трябва за да направите удобно изцяло конзолно плиожение:

  list:
    Widget класове
    Поддръжка на мишка и клавиатура
    Дисплей модули за различни видове конзоли както и за web/html
    Функции за форматиране на текст

= slide 'urwid - форматиране на текст и input' do
  example:
    import urwid
    from urwid import Text, AttrMap, Filler, MainLoop

    palette = [
        ('banner', 'black', 'light gray'),
        ('streak', 'black', 'dark red'),
        ('bg', 'black', 'dark blue')]

    text_widget = Text(("banner", "Hello World!"), align="center")
    map1 = AttrMap(text_widget, "streak")
    fill_widget = Filler(map1, valign="middle")
    map2 = AttrMap(fill_widget, "bg")

    def show_or_exit(key):
        if key in('q', 'Q'):
            raise urwid.ExitMainLoop()
        else:
            text_widget.set_text(repr(key))

    loop = MainLoop(map2, palette, unhandled_input=show_or_exit)

    if __name__ == "__main__":
        loop.run()

= slide 'urwid менюта' do
  example:
    import urwid

    choices = 'Chapman Cleese Gilliam Idle Jones Palin'.split()

    def menu(title, choices):
        body = [urwid.Text(title), urwid.Divider()]
        for c in choices:
            button = urwid.Button(c)
            urwid.connect_signal(button, 'click', item_chosen, c)
            body.append(urwid.AttrMap(button, None, focus_map='reversed'))
        return urwid.ListBox(urwid.SimpleFocusListWalker(body))

    def item_chosen(button, choice):
        response = urwid.Text(['You chose ', choice, '\n'])
        done = urwid.Button('Ok')
        urwid.connect_signal(done, 'click', exit_program)
        main.original_widget = urwid.Filler(urwid.Pile([response,
            urwid.AttrMap(done, None, focus_map='reversed')]))

    def exit_program(button):
        raise urwid.ExitMainLoop()

    main = urwid.Padding(menu('Pythons', choices), left=2, right=2)
    top = urwid.Overlay(main, urwid.SolidFill('\N{MEDIUM SHADE}'),
        align='center', width=('relative', 60),
        valign='middle', height=('relative', 60),
        min_width=20, min_height=9)

    urwid.MainLoop(top, palette=[('reversed', 'standout', '')]).run()

= slide 'Coverage' do
  example:
    pip install coverage

  p Проверява през каква част от кода ви се изпълнява в дадени случаи

  example:
    coverage run баба.py
    coverage report

= slide 'ipython и ipdb' do
  example:
    pip install ipython ipdb

  p По-удобен терминал и дебъгър

= slide 'Бира!' do
  p На 2013-06-09 в Борисовата градина ще пием бира
