= slide 'Традицията повелява' do
    annotate:
        import jars

        ERROR = -1
        SUCCESS = 0

        def the_winter_is_coming():
            jar = jars.Jar()
            if jar.clean() == jars.ERROR
                print("Something went terribly wrong!")
                return ERROR
            if jar.fill('python juice') == jars.ERROR
                print("Something went terribly wrong!")
                return ERROR
            if jar.close() == jars.ERROR
                print("Something went terribly wrong!")
                return ERROR
            return SUCCESS

= slide 'Традициите не са...' do
    annotate:
        import jars

        def the_winter_is_coming()
            try:
                jar = jars.Jar()
                jar.clean()
                jar.fill('python juice')
                jar.close()
            except jars.Error
                print("Something went terribly wrong!")

= slide 'Синтаксис и семантика' do
    annotate:
        try
            # блок
        except Изключение
            # блок ако се случи някое от описаните изключения
        …

        except ДругоИзключение
            # блок ако се случи някое от описаните изключения
        except
            # блок ако изключението не е хванато по-горе
        else
            # блок ако не е възникнала изключителна ситуация
        finally
            # блок изпълнява се винаги

= slide 'Стандартни изключения' do
    annotate:
        BaseException
         +-- SystemExit
         +-- KeyboardInterrupt
         +-- GeneratorExit
         +-- Exception
              +-- StopIteration
              +-- ArithmeticError
                 +-- ...
              +-- AssertionError
              +-- AttributeError
              +-- NameError
                 +-- UnboundLocalError
              +-- OSError
                 +-- ...
              +-- RuntimeError
                 +-- NotImplementedError
              +-- SyntaxError
                 +-- IndentationError
                      +-- TabError
              +-- SystemError
              +-- TypeError
              +-- ValueError
                 +-- ...
              +-- Warning
                   +-- ...

= slide 'Повече информация рядко е излишна' do
    annotate:
        try:
            x = [] / 4
        except TypeError as data:
            print(data)
    p Какво ще има в data, зависи от самото изключение, но е прието всички да връщат годна за отпечатване стойност, ако се дадат като аргументи на str или repr.


= slide "Ако за няколко изключения имаме една и съща реакция, можем да ги прихванем накуп" do
    annotate:
        try:
            doomed()
        except (NameError, TypeError) as data:
            print(data)
        except (MyError, YourError):
            print("Opps! This sholist:dn't've hapenned...")
        except:
            print("Unknown exception.")
        else:
            print("It's my happy day!")
    p С празен except прихващаме изключения, които не са били хванати до момента. Трябва да бъде поставен след всички други except-и.

= slide "finally" do
    annotate:
        file = open('data.txt')
        try:
            mymodlist:e.load_info(file)
        except IOError as data:
            print("Colist:dn't read from file:", data)
        except (mymodlist:e.BadDataError, mymodlist:e.InternalError) as data:
            print('Loading failed:', data)
        else:
            print('Data loaded successflist:ly from file.')
        finally:
            file.close()
    p Ако присъства, finally стои винаги най-отдолу.

= slide "Създаване на изключения" do
    annotate:
        class XmasError(Exception):
            def __init__(self):
                self.issuer, self.message = 'Robosanta', 'watches you'

        class NaughtyError(XmasError):
            def __init__(self):
                super().__init__()
                self.message = 'You were very naughty this year!'

        class AreYouDeadYetError(XmasError):
            def __init__(self):
                super().__init__()
                self.message = 'Are you dead yet?'

        def confess_sins(): raise NaughtyError

        def celebrate_xmas(): raise AreYouDeadYetError

= slide "Ескалиране на грешката" do
    list:
        Когато Python се натъкне на изключение в даден блок и в него то не се обработи, изключението се праща към горния блок, после към по-горния и така докато или изключението не бъде прехванато или не стигнем най-отгоре и интерпретаторът не спре програма по познатия ни вече начин (в червеничко).
        Можем да се намесим в следната схема или като прихванем изключението (вече знаем как), или като пратим изключението нагоре по трасето. Последното става с голо извикване на raise:
    annotate:
        try:
            bender.live_a_day()
        except BenderError:
            bender.boned = True
            # Бендър не може да се оправя с това, нека тези отгоре да се грижат
            raise

= slide "Подходи" do
    list:
        Look Before You Leap (LBYL)
        Easier to Ask for Forgiveness than Permission (EAFP)

= slide "Нека обобщим" do
    p Няколко неща, за които може да ползваме изключения:

    p обработка на грeшки:
    list:
        структурирани, прихващаеми, позволяващи предаване на допълнителна информация
        вградените функции и твърдения широко ги използват
        пораждане и прихващане на собствени изключения
    p безусловно извършване на заключителни действия — <strong>finally</strong>

= slide "Finally <em>finally</em>?" do
    list:
        Искаме да обърнем реда на редовете на файл?
    annotate:
        try:
            source_file = open(src, 'r')
            buffer = []
            try:
                buffer = source_file.readlines()
            finally:
                source_file.close()

            target_file = open(target, 'w')
            try:
                for line in reversed(buffer):
                    target_file.write(line)
            finally:
                target_file.close()
        except IOError:
            print("Tough luck, junior")



= slide "Too long; didn't read?" do
    annotate:
        buffer = []
        try:
            with open(src) as source_file:
                buffer = source_file.readlines()
            with open(target) as target_file:
                for line in reversed(buffer):
                    target_file.write(line)
        except IOError:
            print("Much better, now, ain't it?")
    list:
        <em>with</em> гарантира, че файлът ще бъде затворен автоматично.


= slide "with" do
    annotate:
        with израз [as име]:
           блок
    list:
        Резултатът от израза се нарича Context Manager
        Изпълнява се метода <em>__enter__()</em> на <abbr title='Context Manager'>CM</abbr> и резултатът се записва в името след <em>as</em>
        Изпълнява се блока
        Ако е настъпило излючение се изпълнява <em>__exit__(type, value, traceback)</em> на <abbr title='Context Manager'>CM</abbr>
        Ако <em>не е</em> настъпило излючение се изпълнява <em>__exit__(None, None, None)</em> на <abbr title='Context Manager'>CM</abbr>


= slide "with нагледно" do
    annotate:
        with open('/etc/passwd') as source_file:
            buffer = source_file.readlines()
        print('Done!')

    p е същото като
    annotate:
        source_file = open('/etc/passwd').__enter__()
        try:
          buffer = source_file.readlines()
          source_file.__exit__(None, None, None)
        except Exception:
          source_file.__exit__(*sys.exc_info())
        print('Done!')



= slide "Малък пример" do
    annotate:
        class Manager:
            def __enter__(self):
                print("I've been entered!")
                return 42
            def __exit__(self, type, value, traceback):
                print("I've been exited!")

        with Manager() as something:
            print("Am I inside?")
            print(something)

        # I've been entered!
        # Am I inside?
        # 42
        # I've been exited!


= slide "with с няколко аргумента" do
    annotate:
        with foo() as f, bar() as b:
           ...

    p е същото като

    annotate:
        with foo() as f:
            with bar() as b:
               ...


= slide "contextlib" do
    p Вграденият модул <em>contextlib</em> ни предлага три много полезни Context Manager-а:
    list:
        <em>closing</em>
        <em>contextmanager</em>
        <em>ContextDecorator</em>


= slide "closing" do

    p <em>contextlib.closing</em> вика метода <em>close</em> на обекта, с който работим, след изпълнение на блока:

    annotate:
        class closing(object):
            def __init__(self, thing): self.thing = thing
            def __enter__(self): return thing
            def __exit__(self, type, value, traceback):
                self.thing.close()

    p ...и ви позволява да пишете следното:

    annotate:
        from contextlib import closing
        import codecs

        with closing(urllib.urlopen('http://www.python.org')) as page:
            for line in page:
                print(line)
