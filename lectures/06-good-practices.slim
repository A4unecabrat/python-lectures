= slide 'Първо правило: Добри имена на променливи' do
    p Променливите обикновенно отговарят за съществуващи обекти/концепции в реалния проблем, който решавате. Това ги прави идеални за комуникиране на идеята на кода. За целта, обаче, се налага да избирате смислени имена.
    ul
        li.action Използвайте смислени имена, които да показват ясно и недвусмислено за какво служи променливата
        li.action Спазвайте конвенция в именуването на нещата
        li.action Избягвайте думи, в които лесно се допускат правописни грешки
        li.action Избягвайте криптични съкращения или дълги имена - numberOfPeopleOnTheUsOlympicTeam, npot, teamMemberCount
        li.action Избягвайте като цяло безсмислени имена - thing, stuff, foo
        li.action Бъдете консистенти в наименоването на променливите - без shipsCount и numDocks в една програма.
        li.action Не използвайте една променлива два пъти за едни и същи неща.


= slide 'Типична грешка' do
    example:
        # Грешно
        temp = sqrt(b ** 2 - 4 * a * c)
        x1 = (-b + temp) / (2 * a)
        x2 = (-b - temp) / (2 * a)

        # По-правилно
        discriminant = sqrt(b ** 2 - 4 * a * c)
        x1 = (-b + discriminant) / (2 * a)
        x2 = (-b - discriminant) / (2 * a)


= slide 'Лоши имена' do
    example:
        old = read_old()
        tpl = get_values("c:/")
        tup = {}
        for t in tpl:
            if old[t] != tpl[t]: continue
            tup.update({t:tpl[t]})

        show(tup)
        save(tpl)


= slide 'Добри имена' do
    example:
        old_hashsums = read_cached_hashsums()
        new_hashsums = find_hashsums('c:/')

        changed_files = {}
        for filename in old_hashsums:
            if old_hashsums[filename] != new_hashsums[filename]:
                changed_files[filename] = new_hashsums[filename]

        report_changes(changed_files)
        save_hashsums(new_hashsums)


= slide 'Функция/Метод > Блок с коментар' do
    p Функциите са едно от най-често използваните средства в програмирането. И все пак, причините за които има смисъл да създавате функция са.
    ul
        li.action Опростяване на кода.
        li.action Избягване на повтаряне на код.
        li.action Скриване на последователни действия.
        li.action Разширяемост.
        li.action За по-гъвкаво наследяване.
        li.action Изолиране на сложността.
        li.action Скриване на имплементационни детайли.
        li.action Като цяло: за създаване на абстракция.


= slide 'Именуване на функции' do
    p При именуване на рутини се съобразявайте внимателно със следните неща.
    ul
        li.action Да обяснява всичко което функцията прави
        li.action Избягвайте безсмислени и размити имена - doStuff(), generateData(), processInput().
        li.action Не различавайте две рутини само по число - wait2() и wait3().
        li.action Ако функцията връща стойност, кръстете я така че да описва връщаната стойност
        li.action Ако функцията е „процедура“, използвайте глагол в името й, който да описва действието й.
        li.action Използвайте противоположни имена - add/remove, open/close, get/set - консистентно.


= slide 'Как пишем документация' do
    example:
        # Това е моята функция, която променя флукса на
        # кондензатора
        def modify_flux_capacitor(new_value):
            ...

    p Не.


= slide 'Как пишем документация' do
    example:
        def modify_flux_capacitor(new_value):
            # Това е моята функция, която променя флукса на
            # кондензатора
            ...

    p Не.

= slide 'Как пишем документация' do
    example:
        def modify_flux_capacitor(new_value):
            """Това е моята функция, която променя флукса на
            кондензатора."""
            ...

    p Здравейте, docstrings!
    p some_function.__doc__

= slide '.pyc' do
    ul
        li.action .pyc са прекомпилирани версии на .py файловете ни
        li.action В Python 3 стоят в директорията __pycache__
        li.action В Python 2 стоят до .py файловете
        li.action Не мислим за тях 
        li.action (освен при version control)

= slide 'Модули' do
    ul
        li Всеки файл е модул
        li Всяка директория е модул, ако има __init__.py
        li __init__.py често е празен, но не е задължително

= slide 'Модули' do
    example:
        # delorean/__init__.py
        def time_travel_possible(speed):
            return speed >= 88

        # mcfly.py
        from delorean import time_travel_possible

= slide 'Модули' do
    example:
        from module import a, b, c
        a()

= slide 'Модули' do
    example:
        from module import a, b, c
        a()

        from module import a as b
        b()

= slide 'Модули' do
    example:
        from module import a, b, c
        a()

        from module import a as b
        b()

        from django.contrib.auth.models import User
        my_user = User()

= slide 'Модули' do
    example:
        from module import a, b, c
        a()

        from module import a as b
        b()

        from django.contrib.auth.models import User
        my_user = User()

        from module import * # не се препоръчва

= slide 'Модули' do
    example:
        from django.db import models
        my_model = models.Model()

= slide 'Модули' do
    example:
        import datetime
        now = datetime.datetime.now()

        import os, sys
        sys.path.append('/h4x0r')


= slide 'Кохезия' do
    p „Кохезията“ на една рутина смътно описва действието й. Като говорим за „добра кохезия“ имаме предвид, че една рутина прави едно единствено нещо и го прави добре. Най-силния вид „кохезия“ е функционалната.


= slide 'Приемливи видове кохезия' do
    ul
        li.action Последователна кохезия - рутината капсулира няколко действия, които трябва да се направят последователно.
        li.action Комуникационна кохезия - рутината извършва няколко различни операции над едни и същи данни
        li.action Времева козехия - рутината извършва няколко действия, които трябва да станат едновременно - Startup(), Shutdown()


= slide 'Неприемливи видове кохезия' do
    ul
        li.action Процедурна - когато рутината е създадена само защото това отговаря на последователността в която потребителя извършва действията.
        li.action Логическа - поведението на рутината зависи силно от стойността на някой параметър.
        li.action Случайна - когато действията в рутината не са особено свързани.

= slide 'Аргументи на функциите' do
    ul
        li.action Действието на една рутина не трябва да зависи от стойностите на неин аргумент.
        li.action Старайте се да не ползвате повече от 7 (седем) аргумента в една рутина
        li.action Когато извиквате рутина с много аргументи, хубаво е да ползвате възможността на Python да предава аргументите наименовано.
        li.action Не променяйте състоянието на параметрите на функциите, ако може да го избегнете.
        li.action Ако ползвате параметри за изход, тогава избягвайте да ги ползвате и като входни.
        li.action Ако евентуално имате нужда от параметри за вход, вход-изход и изход, подреждайте ги консистентно в програмата си.


= slide 'Не ползвайте глобални променливи' do
    p Когато пишете функции, не ползвайте глобални променливи. Ама въобще. Най-честия случай на неправилно ползване на глобавни променливи е когато се употребяват за комуникация между функции. Никога не правете това. В рядките случаи, в които имате нужда от „глобални“ обекти правете Singleton-и или thread.local-и.


= slide 'Не ползвайте goto' do
    p В Python няма goto. Ако случайно пишете на друг език, в който има goto, това правило остава - не ползвайте goto.


= slide 'Не използвайте глупави низове в съобщенията за грешка' do
    p


= slide 'Еквивалентност' do
    ul
        li.action Observational equivalence
        li.action Behavior equivalence
    p Имате два обекта. Те са равни ако…


= slide 'Observational equivalence' do
    p …с произволна поредица от observer методи не може да разберете дали те са различни или не.


= slide 'Behavioral equivalence' do
    p …с произволна поредица от observer-и и мутатори не може да разберете дали те са различни или не.


= slide 'Design by Contract' do
    p За всеки метод се дефинира следното:
    ul
       li.action Предусловие (precondition) - условие, което трябва да бъде изпълнено за да може клиентът да извика този метод
       li.action Постусловие (postcondition) - условие, гарантирано да бъде изпълнено след приключването на метода
       li.action Инвариант (invariant) - условие, което трябва да бъде изпълнено по време на изпълнение на метода


= slide 'Наследяването е зло' do
    ul
        li.action Като състоянието. Унищожава планети.
        li.action Композицията е по-яка.
        li.action Не ни вярвате?


= slide 'Кой кого?' do
    example:
        class Rectangle:
                def a(self): ...
                def b(self): ...
                def setA(self, a): ...
                def setB(self, b): ...

        class Square:
                def a(self): ...
                def setSide(self, side): ...


= slide 'Liskov\'s Substitution Principle' do
    p Клас Б може да наследи от клас А, само ако на всички места на които може да използвате инстанция на А може да използвате инстанция на Б.


= slide 'Liskov\'s Substitution Principle (2)' do
    p В термините на Design by Contract Б може да наследи А ако:
    ul
        li.action Дефинира толкова или по-малко строги предусловия от А
        li.action Дефинира толкова или по-строги постусловия от А
        li.action Запазва инвариантите на А


= slide 'Design Patterns' do
    p The second coming of Jesus.

