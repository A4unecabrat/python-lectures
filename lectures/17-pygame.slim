= slide 'Защо искаме да правим игри?' do
    list:
        Забавни са
        Предлагат ни изцяло нов начин на мислене
        Фукаме се с яките алгоритми, които сме научили в университета
= slide 'Колко точно различно е?' do
    list:
        Дребните детайли са критични
        Зависите от ресурсите на потребителската машина
        Физика, Изкуство, Музика, Математика...
= slide 'Основните ни занимания' do
    list:
        Показваме неща на екрана
        Обработваме потребителски вход
        Имплементираме основната механика
        Възпроизвеждаме звуци и музика
        Гоним завършена архитектура
= slide 'Показваме неща на екрана' do
    list:
        Отваряме прозорец
        Правим си платно
        Чертаем разни неща
        Местим вече налични такива
        Показваме платното в прозореца
        И за всичко това ще ни трябват event-и
= slide 'Безкрайният цикъл' do
    p Цялата ни игра е един безкраен цикъл, в който обработваме event-и
    example:
         import pygame

         pygame.init()
         screen = pygame.display.set_mode((640, 480))

         while True:
           pass
= slide 'Безкраен цикъл done right' do
    example:
      import pygame


      class Game:
          running = True

          def __init__(self, size):
              pygame.init()
              self.screen = pygame.display.set_mode(size)

          def main(self):
              while self.running:
                  for event in pygame.event.get():
                      if event.type == pygame.QUIT:
                          return

      if __name__ == '__main__':
          Game((800, 600)).main()
= slide 'Чертаене' do
    list:
        Координатна система
        fill &amp; blit
        flip
        pygame.time.Clock
        Scene construction
= slide 'FPS' do
    p Различни машини - различни възможности.
    p pygame.time.Clock
    example:
        while self.running:
           clock.tick(30)
           for event in pygame.event.get():
               if event.type == pygame.QUIT:
                   return

           screen.fill((200, 200, 200))
           screen.blit(image, (320, 240))
           pygame.display.flip()
= slide 'Анимации' do
    p Със всяка итерация променяме координатите на нещото, което се "движи"
    p и всеки път подаваме новите на screen.blit:
    example:
      screen.blit(image, (x, y))

= slide 'User Input' do
    ul
        li Events
        li State dictionary

    example:
        key = pygame.key.get_pressed()
        if key[pygame.K_LEFT]:
            image_x -= 10
        if key[pygame.K_RIGHT]:
            image_x += 10
        if key[pygame.K_UP]:
            image_y -= 10
        if key[pygame.K_DOWN]:
            image_y += 10
= slide 'Sprites' do
    p Двуизмерна картинка или анимация, интегрирана в някакво пространство
    example:
        class Player(pygame.sprite.Sprite):
            def __init__(self, *groups):
                super(Player, self).__init__(*groups)
                self.image = pygame.image.load('player.png')
                self.rect = pygame.rect.Rect((320, 240), self.image.get_size())

            def update(self):
                key = pygame.key.get_pressed()
                if key[pygame.K_LEFT]:
                    self.rect.x -= 10
                if key[pygame.K_RIGHT]:
                    self.rect.x += 10
                if key[pygame.K_UP]:
                    self.rect.y -= 10
                if key[pygame.K_DOWN]:
                    self.rect.y += 10
= slide 'Групи от спрайтове' do
    p В общия случай го раздаваме с десетки/стотици спрайтове.
    p Не искаме да се молим на всеки един по отделно да се пречертае
    example:
        class Game(object):
            def main(self, screen):
                clock = pygame.time.Clock()

                sprites = pygame.sprite.Group()
                self.player = Player(sprites)

                while 1:
                    clock.tick(30)

                    for event in pygame.event.get():
                        if event.type == pygame.QUIT:
                            return

                    sprites.update()
                    screen.fill((200, 200, 200))
                    sprites.draw(screen)
                    pygame.display.flip()
= slide 'Малко по-приятна сцена' do
    p screen.fill е полезно, но изключително куцо
    p Би било далеч по-приятно да имаме някакъв красив фон...като небе примерно:
    example:
        def main(self, screen):
            clock = pygame.time.Clock()

            background = pygame.image.load('background.png')
            sprites = pygame.sprite.Group()
            self.player = Player(sprites)

            while 1:
                dt = clock.tick(30)
                for event in pygame.event.get():
                [....]

                sprites.update(dt / 1000.)
                screen.blit(background, (0, 0))
                sprites.draw(screen)
                pygame.display.flip()

= slide 'Gameplay Mechanics' do
    list:
        Player Controls
        Timed rlist:es - кога се появяват обекти, как се движат по полето и кога са излишни
        Интеракция с другите обекти(collision detections)
        Строго следене за важните събития
= slide 'Пуцалка' do
    p Каквото и да правим с това човече, ще стигнем до момента, в който искаме да стреля като обезумяло.
    p Тук нещата загрубяват и имаме нужда от адекватна структура

    example:
      game/
        assets/...
        main.py
        player.py
        projectile.py
        settings.py
        vec2d.py
= slide 'Collision detection' do
    p 4 основни подхода:
    list:
        Axis-Aligned Bounding Box
        Circle-Circle
        HashMap
        Pixel-Perfect
= slide 'Препядствия' do
    p Ще добавим стени, че да не ни бяга човечето, също биха били полезни:
    example:
        self.walls = pygame.sprite.Group()
        block = pygame.image.load('block.png')
        for x in range(0, 640, 32):
            for y in range(0, 480, 32):
                if x in (0, 640-32) or y in (0, 480-32):
                    wall = pygame.sprite.Sprite(self.walls)
                    wall.image = block
                    wall.rect = pygame.rect.Rect((x, y), block.get_size())
        sprites.add(self.walls)
= slide 'Сблъсъци с препядствията' do
    example:
        last = self.rect.copy()
        for cell in pygame.sprite.spritecollide(self, game.walls, dokill=False):
            self.rect = last
= slide 'Прецизни сблъсъци' do
    example:
        new = self.rect
        for cell in pygame.sprite.spritecollide(self, game.walls, False):
            cell = cell.rect
            if last.right <= cell.left and new.right > cell.left:
                new.right = cell.left
            if last.left >= cell.right and new.left < cell.right:
                new.left = cell.right
            if last.bottom <= cell.top and new.bottom > cell.top:
                new.bottom = cell.top
            if last.top >= cell.bottom and new.top < cell.bottom:
                new.top = cell.bottom
= slide 'И още...' do
    list:
        <a href="http://pygame.org/">http://pygame.org</a>
        <a href="http://pyvideo.org/video/615/introduction-to-game-development">http://pyvideo.org/video/615/introduction-to-game-development</a>
