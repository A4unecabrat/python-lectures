section.slide
    h2 | Finally <em>finally</em>?
    ul
        li | Искаме да обърнем реда на редовете на файл?
    pre.prettyprint
        | try:
        |     source_file = open(src, 'r')
        |     buffer = []
        |     try:
        |         buffer = source_file.readlines()
        |     finally:
        |         source_file.close()

        |     target_file = open(target, 'w')
        |     try:
        |         for line in reversed(buffer): 
        |             target_file.write(line)
        |     finally:
        |         target_file.close()
        | except IOError:
        |     print("Tough luck, junior")


section.slide
    h2 | Too long; didn't read?
    pre.prettyprint
        | buffer = []
        | try:
        |     with open(src) as source_file:
        |         buffer = source_file.readlines()
        |     with open(target) as target_file:
        |         for line in reversed(buffer):
        |             target_file.write(line)
        | except IOError:
        |     print("Much better, now, ain't it?")

    ul
        li | <em>with</em> гарантира, че файлът ще бъде затворен автоматично.


section.slide
    h2 | with
    pre.prettyprint
        | with израз [as име]:
        |    блок
    ul
        li | Резултатът от израза се нарича Context Manager
        li | Изпълнява се метода <em>__enter__()</em> на <abbr title='Context Manager'>CM</abbr> и резултатът се записва в името след <em>as</em>
        li | Изпълнява се блока
        li | Ако е настъпило излючение се изпълнява <em>__exit__(type, value, traceback)</em> на <abbr title='Context Manager'>CM</abbr>
        li | Ако ***не е*** настъпило излючение се изпълнява <em>__exit__(None, None, None)</em> на <abbr title='Context Manager'>CM</abbr>

section.slide
    h2 | with нагледно
    pre.prettyprint
        | with open('/etc/passwd') as source_file:
        |     buffer = source_file.readlines()
        | print('Done!')

е същото като
    pre.prettyprint
        | source_file = open('/etc/passwd').__enter__()
        | try:
        |   buffer = source_file.readlines()
        |   source_file.__exit__(None, None, None)
        | except Exception:
        |   source_file.__exit__(*sys.exc_info())
        | print('Done!')
  

section.slide
    h2 | Малък пример
    pre.prettyprint
        | class Manager: 
        |     def __enter__(self): 
        |         print("I've been entered!")
        |         return 42 
        |     def __exit__(self, type, value, traceback): 
        |         print("I've been exited!")
 
        | with Manager() as something: 
        |     print("Am I inside?")
        |     print(something)

        | # I've been entered!
        | # Am I inside?
        | # 42
        | # I've been exited!

section.slide
    h2 | with с няколко аргумента
    pre.prettyprint
        | with foo() as f, bar() as b:
        |    ...

    p | е същото като

    pre.prettyprint
        | with foo() as f:
        |     with bar() as b:
        |        ...

section.slide
    h2 | contextlib
    p | Вграденият модул <em>contextlib</em> ни предлага три много полезни Context Manager-а:
    ul
        li | <em>closing</em>
        li | <em>contextmanager</em>
        li | <em>ContextDecorator</em>

section.slide
    h2 | closing

    p | <em>contextlib.closing</em> вика метода <em>close</em> на обекта, с който работим, след изпълнение на блока:

    pre.prettyprint
        | class closing(object):
        |     def __init__(self, thing): self.thing = thing
        |     def __enter__(self): return thing
        |     def __exit__(self, type, value, traceback): self.thing.close()

...и ви позволява да пишете следното:

    pre.prettyprint
        | from contextlib import closing
        | import codecs

        | with closing(urllib.urlopen('http://www.python.org')) as page:
        |     for line in page:
        |         print(line)



section.slide
    h2 | contextmanager
    p | <em>contextmanager</em> е декоратор, който превръща генератор функция в context manager:
    pre.prettyprint
        | from contextlib import contextmanager

        | @contextmanager
        | def entering(whom):
        |     print("I've been entered by {0}".format(whom))
        |     yield "ticket"
        |     print("I've been exited!")

        | with entering("someone") as something:
        |     print("Am I inside?")
        |     print(something)

        | # I've been entered by someone
        | # Am I inside?
        | # ticket
        | # I've been exited!

    ul
        li | yield изпълнява блока и аргумента му става обекта, с който работи блока
((Pearl Jam FTW!!!))

section.slide
    h2 | ContextDecorator
    pre.prettyprint
        | from contextlib import ContextDecorator

        | class mycontext(ContextDecorator):
        |     def __enter__(self):
        |         print('Starting')
        |         return self
        | 
        |     def __exit__(self, *exc):
        |         print('Finishing')
        |         return False

        | >>> @mycontext()
        | ... def function():
        | ...     print('The bit in the middle')
