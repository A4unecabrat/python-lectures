Колекции в Python
10.03.2011г.

== Вградените колекции в Python ==
 * списъци (`list`)
 * n-орки (`tuple`)
 * речници (`dict`)
 * множества (`set`)

== Но преди това... ==
Какво ви показахме предния път?

== for ==
{{{python
for age in range(1, 10000):
    if age > 169:
        print("You reached super-human limits!")
        break
    if age % 17 == 1:
        print("So lucky!")
        continue
    print("So ordinary my leg hurts.")
}}}

== Факториел ==
{{{python
def factorial(n):
    if n <= 1:
        return 1
    else:
        return n * factorial(n - 1)
}}}

== Списъци ==
{{{python
things = ['spam', 42, 3.14]
things[1] = 'baba'
have_eggs = 'eggs' in things
more_things = things + ['ham', 'cheese']
del more_things[2]
}}}

== slice ==
{{{python
>>> numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> numbers[3:9]
[3, 4, 5, 6, 7, 8]
>>> numbers[0:10:2]
[0, 2, 4, 6, 8]
>>> numbers[3:9] = [-1, -1, -1]
[0, 1, 2, -1, -1, -1, 9]
>>> numbers[::2] = ['w', 'x', 'y', 'z']
['w', 1, 'x', -1, 'y', -1, 'z']
}}}

== Въпроси към вас (1) ==
Какво ще изведе този код?

{{{python
foods = ['spam', 'eggs', 'ham']
things = foods
things[1] = 'chips'
print(foods[1])
}}}

== Въпроси към вас (2) ==
А този?

{{{python
a = ['spam', 'eggs', 'ham']
b = a
c = a[:]
print(a is b, a is c)
print(a == b, a == c)
b[1] = 'milk'
print(a is b, a is c)
print(a == b, a == c)
}}}

== Въпроси към вас (3) ==
Или пък този?

{{{python
cheese = ['cheddar', 'red leicester', 'emmental']
cheese[1] = cheese
food = cheese[1][:]
cheese[2] = 'limburger'
print(food[2])
print(food[1][2])
}}}

== n-торки(tuples) ==l
 * n-торките са неизменяеми `(immutable)` списъци
 * Записват се по същия начин, но с малки скоби, вместо средни:
{{{python
        primes = (2, 3, 5, 7, 11, 13)
}}}
 * prime = `(2,)`, иначе ще се сметне за израза `2`
 * Можете да ги индексирате и `slice`-вате, но не и променяте:
 * Могат да се влагат:
{{{python
        ("Foo", "Bar", ("Spam",), ("More", "Spam"))
}}}

== И те, като списъците, поддържат: ==
 * `+`
 * `*`
 * `1 in (1, 2)`
 * `for x in (1, 2):`
 * `.index`
 * `.count`

== Любопитни работи (1) ==
Ако имате n-торка, съдържаща само имена от лявата страна на присвояване, може да постигнете интересни ефекти:

{{{python
>>> (a, b) = 1, 2
>>> print(a)
1
}}} 

== Любопитни работи (2) ==
Всъщност скобите не са задължителни:

{{{python
>>> a, b = 1, 2
>>> a, b = b, a
>>> print(a)
2
>>> print(b)
1
}}}

== Любопитни работи (3) ==
Или:

{{{python
>>> numbers = (1, 2, 3)
>>> a, b, c = numbers
}}}

== Любопитни работи (4) ==
В този ред на мисли, същото го могат и списъците

{{{python
>>> numbers = [1, 2, 3]
>>> [a, b, c] = numbers
}}}

== Сравняване на списъци/n-торки ==l
Сравняват се лексикографски:
{{{python
>>> (1, 2) < (1, 3)
True
>>> (1, 2) < (1, 2)
False
>>> (1, 2) < (1, 2, 3)
True
>>> [1, 2] < [1, 3]
True
>>> (1, 2) < [1, 3] # tuple vs. list
# поражда грешка: 
#    TypeError: unorderable types: tuple() < list()
}}}

== Множества (1) ==
 * ((Всеки елемент може да се съдържа не повече от веднъж))
 * ((Създават се така: `set([1, 2, 3])`))
 * ((Или така: `{1, 2, 3}`))
 * ((Празно множество е `set()`, а не `{}`))
 * ((Елементите са ненаредени))
 * ((Могат да съдържат само обекти, които могат да се хешират))

== Множества (2) ==l
{{{python
>>> numbers = {1, 2, 3, 8, 2}
>>> numbers
{8, 1, 2, 3}
>>> 2 in numbers
True
>>> 4 in numbers
False
>>> numbers.add(4)
>>> 4 in numbers
True
>>> numbers.remove(1)
>>> numbers
{8, 2, 3, 4}
}}}

== Множества (3) ==l
{{{python
>>> {1, 2, 3} | {2, 3, 4}
{1, 2, 3, 4}
>>> {1, 2, 3} & {2, 3, 4}
{2, 3}
>>> {1, 2, 3} - {2, 3, 4}
{1}
>>> {1, 2, 3} ^ {2, 3, 4}
{1, 4}
>>> {1, 2, 3} < {2, 3, 4}
False
>>> {2, 3} < {2, 3, 4} # < - подмножество
True
>>> {2, 3} == {2.0, 3}
True
>>> {1, 2}.isdisjoint({3, 4})
True
}}}

== Преобразуване между `list`, `set` и `tuple` ==
{{{python
>>> set([1, 2, 3, 8, 2])
{8, 1, 2, 3}
>>> list({1, 2, 3})
[1, 2, 3]
>>> tuple([1, 2, 3])
(1, 2, 3)
>>> list((1, 2, 3))
[1, 2, 3]
}}}

== Речници ==
 * хеш (hash)
 * карта (map)
 * асоциативен масив (associative array)

== Речници (2) ==
{{{python
languages = {
    'Spain': 'Spanish',
    'Great Britain': 'English',
    'Italy': 'Italian',
    'Mexico': 'Spanish',
    'France': 'French',
    'USA': 'English',
}
print(languages['Mexico']) # Spanish
}}}

== Речници (3) ==ll
{{{python
capitals = {
    'Germany': 'Berlin',
    'France': 'Paris',
    'Brazil': 'Rio de Janeiro',
    'Malaysia': 'Kuala Lumpur',
}
print(capitals['Brazil'])
# Rio de Janeiro
capitals['Brazil'] = 'Brazil'
print(capitals['Brazil'])
# Brazil
capitals['Sweden'] = 'Stockholm'
print(capitals['Sweden'])
# Stockholm
del capitals['Malaysia']
capitals['Malaysia']
# KeyError: 'Malaysia'
}}}

== Речници -- методи ==ll
{{{python
>>> capitals = {
    'Germany': 'Berlin',
    'France': 'Paris',
    'Brazil': 'Rio de Janeiro',
    'Sweden': 'Stockholm',
}
>>> capitals.get('Assyria')
None
>>> capitals.get('Assyria', "I don't know")
"I don't know"
>>> 'Sweden' in capitals
True
>>> list(capitals.keys())
['Brazil', 'Sweden', 'Germany', 'France']
>>> list(capitals.values())
['Rio de Janeiro', 'Stockholm', 'Berlin', 'Paris']
>>> len(capitals)
4
}}}

== Речници -- методи (2) ==l
{{{python
>>> numbers = {
    "One": "I",
    "Two": "II",
}

>>> list(numbers.items())
[('One', 'I'), ('Two', 'II')]
>>> numbers.update({"Three": "III", "Four": "IV"})
>>> numbers
{'Four': 'IV', 'Three': 'III', 'Two': 'II', 'One': 'I'}
>>> numbers.pop('Four')
'IV'
>>> numbers
{'Three': 'III', 'Two': 'II', 'One': 'I'}
}}}

== Речници -- методи (3) ==l
{{{python
>>> {1: 1, 2: 2} == {2: 2, 1: 1}
True
>>> numbers = {"One": "I", "Two": "II"}
>>> numbers_copy = numbers.copy()
>>> numbers_copy
{'Two': 'II', 'One': 'I'}
>>> numbers
{'Two': 'II', 'One': 'I'}
>>> numbers.clear()
>>> numbers_copy
{'Two': 'II', 'One': 'I'}
>>> numbers
{}
}}}

== Три други начина за създване на речник ==l
Чрез наименовани параметри към конструктора (не питайте):

{{{python
>>> dict(france="Paris", italy="Rome")
{'italy': 'Rome', 'france': 'Paris'}
}}}

Чрез списък от двойки
{{{python
>>> dict([('One', 'I'), ('Two', 'II')])
{'Two': 'II', 'One': 'I'}
}}}

Чрез списък от ключове и стойност по подразбиране
{{{python
>>> dict.fromkeys([1, 2, 3], 'Unknown')
{1: 'Unknown', 2: 'Unknown', 3: 'Unknown'}
}}}

== Речници и хеш функции ==
 * ((Функция от вид: `обект → число`))
 * ((Не е нужно да е инективна))
 * ((Ако два обекта са еднакви по стойност, те имат еднакъв хеш))
 * ((Възможно е различни обекти да имат еднакъв хеш))
 * ((За да работят речниците и множествата, ключовете трябва да могат да се сравняват с `==`))
 * ((Добре е това да става по смислен начин))
 * ((Желателно е ключовете да са `immutable`))

== Още въпроси? ==
 * Страница на курса: http://fmi.py-bg.net
 * Форум на курса: http://fmi.py-bg.net/topics
