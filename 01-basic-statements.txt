Основни типове и конструкции
08.03.2011г.

== Python Shell  ==l

{{{python
>>> word = "Ni! "
>>> knights = "We Are The Knights Who Say"
>>> print(knights, word * 3)
We Are The Knights Who Say Ni! Ni! Ni!
>>> twice_eight = 2 * 8
>>> twice_eight == 12
False
>>> #Just a second to find a calculator...
>>> 16 == twice_eight
True
}}}

== Програма на Python ==l

 * Най-обикновен текстови файл
 * `whoami.py`:
{{{python
import sys
version = sys.version_info[0]
name = "Guido"
print("Hello, I'm Python", version, "and", name, "found me!")
}}}

 * Изпълняват се с double click под Windows
 * С команда: `python whoami.py`
 * Резултатът:
`Hello, I'm Python 3 and Guido found me!`
 
 == Обекти, имена, променливи ==l
 
 * Всичко е обект
 * Пред имената им ***няма*** никакви долари, диези, маймуни или други странни символи
 * Присвояването става с `=`
 * Типът обект, който стои зад дадено име, може да се променя:
{{{python
answer = "Forty Two"
answer = 42
}}}
 * Има garbage collector, който се грижи за "излишъците"
 * Използването на недефинирани имена води до грешка:
{{{python
>>> print(question)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'question' is not defined
}}}

== Основни типове ==

 * ((Цели числа — `int` (`1`, `-99`, `111111111111111111111111111111`)))
 * ((Не толкова цели числа — `float`, `complex` (`2.71828`, `217e-2`, `3.0+4.0j`, `complex(1,2)`)))
 * ((Текстови низове — `str`))
 * ((Булеви данни — `bool`))
 * ((Типове дефинирани от потребителя))

== Операции с числа ==

 * ((Събиране (`+`), изваждане (`−`), умножение (`*`)))
 * ((Деление (`/`), целочислено деление (`//`), деление с остатък (`%`)))
 * ((Повдигане на степен (`**`)))
 * ((Побитови операции (само за цели числа) - `<<`, `>>`, `&`, `|`, `^`, `~`))
 
== Текстови низове ==l

 * ((Текстовите низове се представят с класа `str`))
 * ((Текстовите низове се представят в `Unicode`))
 * ((Записът е с единични или двойни кавички — `"spam and eggs", 'larodi'`))
 * ((Единствената разлика е кои кавички трябва да `escape`-вате))
 * ((Някои escape кодове: `\\ \' \" \a \b \f \n \r \t \v`))

== Дефиниране на низове ==l
{{{python
>>> food = 'spam'
>>> taste = "yum"
}}}

{{{python
>>> "spam" == 'spam'
True
}}}

{{{python
>>> 'I can\'t taste your ' + food + ', can I?'
>>> "Yes, you can't"
}}}

== Джордж Бул ==

 * ((Тип `bool` -- `True` `False`))
 * ((`and`, `or` и `not` работят точно както очаквате))
 * ((`==` и `!=` също действат както очаквате.))
 * ((`6 * 9 == 42` връща `False`))

== Булеви Операции ==l
 * ((`<` и `>` са оператори за сравнение))
 * ((`"Perl" < "Python"` връща True))
 * ((Разбира се, можете да ползвате всички тези оператори и за числа))
 * ((Операторите имат `<=` и `>=` версии))
 * ((Не можете да сравнявате несравними обекти))
 * ((Т.е. `20 < 'Foo'` гърми с `TypeError` ))

== Блокове ==

 * ((Блоковете в Python се идентират с whitespace (табулации или интервали)))
 * ((Което и да изберете, бъдете консистентни. Непоследователното отместване води до синтактична грешка!))
 * ((Преди всяко изместване по-навътре се слагат `:`))
 * (([[PEP 8 http://www.python.org/dev/peps/pep-0008/]] казва да ползваме 4 space-а =>))
 * ((***Ползваме 4 space-а!***))

== what if ==

{{{python
if name == "King Arthur":
    print("What is the average speed of a swallow?")
elif name == "Sir Robin":
    print("What is the capital of Assyria")
elif name == "Sir Lancelot":
    print("What is your favourite color?")
else:
    print("Run! It's the Legendary Black Beast of Aaarrgh!")
}}}

== while ==

{{{python
connected = False

while not connected:
    print("Trying...")
    connected = retry()

print("We're now connected")
}}}
    
== for ==

{{{python
for n in range(12, 22):
    if 2 * 7 == n:
        print("Middle brother")
    else:
        print("sad unicorn")    
}}}

== break/continue ==

{{{python
for age in range(1, 10000):
    if age > 169:
        print("You reached super-human limits!")
        break
    if age % 17 == 1:
        print("So lucky!")
        continue
    print("So ordinary my leg hurts.")
}}}

== while ... else ==l

{{{python
retries = 3
connected = False

while retries:
    print("Trying to connect")
    connected = connect()
    
    if connected:
        break
    
    retries -= 1
    print("Failed. Trying again - {0} retries left...".format(retries))
else:
    print("Connection failed: Try again later.")
}}}

== факториел ==

{{{python
def f(n):
    if n <= 1:
        return 1
    return n*f(n-1)
}}}

== Още въпроси? ==
 * Страница на курса: http://fmi.py-bg.net/
 * Форуми на курса: http://fmi.py-bg.net/topics
