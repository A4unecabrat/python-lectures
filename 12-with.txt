with и анотации
14.04.2011

== Пример с файлове ==ll
 * Искаме да обърнем реда на редовете на файл
{{{python
try:
    source_file = open(src, 'r')
    buffer = []
    try:
        buffer = source_file.readlines()
    finally:
        source_file.close()

    target_file = open(target, 'w')
    try:
        for line in reversed(buffer): 
            target_file.write(line)
    finally:
        target_file.close()
except IOError:
    print("Tough luck, junior")
}}}

== Още един опит ==
{{{python
buffer = []
try:
    with open(src) as source_file:
        buffer = source_file.readlines()
    with open(target) as target_file:
        for line in reversed(buffer):
            target_file.write(line)
except IOError:
    print("Much better, now, ain't it?")
}}}
 * Файловете ще бъдат затворени автоматично

== with ==ll
{{{python
with израз [as име]:
    блок
}}}
 * Резултатът от израза се нарича Context Manager
 * Изпълнява се метода `__enter__()` на <abbr title='Context Manager'>CM</abbr> и резултатът се записва в името след `as`
 * Изпълнява се блока
 * Ако е настъпило излючение се изпълнява `__exit__(type, value, traceback)` на <abbr title='Context Manager'>CM</abbr>
 * Ако ***не е*** настъпило излючение се изпълнява `__exit__(None, None, None)` на <abbr title='Context Manager'>CM</abbr>

== with нагледно ==l
{{{python

with open('/etc/passwd') as source_file:
    buffer = source_file.readlines()
print('Done!')
}}}

е същото като
{{{python

source_file = open('/etc/passwd').__enter__()
try:
  buffer = source_file.readlines()
  source_file.__exit__(None, None, None)
except Exception:
  source_file.__exit__(*sys.exc_info())
print('Done!')
}}}
  

== Малък пример ==l
{{{with_output
 
class Manager: 
    def __enter__(self): 
        print("I've been entered!")
        return 42 
    def __exit__(self, type, value, traceback): 
        print("I've been exited!")
 
with Manager() as something: 
    print("Am I inside?")
    print(something)
}}}

== with с няколко аргумента ==l
{{{python
with foo() as f, bar() as b:
    ...
}}}

 * е същото като

{{{python
with foo() as f:
    with bar() as b:
        ...
}}}

== contextlib ==
Вграденият модул `contextlib` ни предлага три много полезни Context Manager-а:
 * `closing`
 * `contextmanager`
 * `ContextDecorator`

== closing ==l

`contextlib.closing` вика метода `close` на обекта, с който работим, след изпълнение на блока:

{{{python
class closing(object):
    def __init__(self, thing): self.thing = thing
    def __enter__(self): return thing
    def __exit__(self, type, value, traceback): self.thing.close()
}}}
...и ви позволява да пишете следното:
{{{python
from contextlib import closing
import codecs

with closing(urllib.urlopen('http://www.python.org')) as page:
    for line in page:
        print(line)
}}}

== contextmanager ==ll
`contextmanager` е декоратор, който превръща генератор функция в context manager:
{{{with_output
from contextlib import contextmanager

@contextmanager
def entering(whom):
    print("I've been entered by {0}".format(whom))
    yield "ticket"
    print("I've been exited!")

with entering("someone") as something:
    print("Am I inside?")
    print(something)
}}}
 * yield изпълнява блока и аргумента му става обекта, с който работи блока
((Pearl Jam FTW!!!))

== ContextDecorator ==ll
{{{python
from contextlib import ContextDecorator

class mycontext(ContextDecorator):
    def __enter__(self):
        print('Starting')
        return self

    def __exit__(self, *exc):
        print('Finishing')
        return False

>>> @mycontext()
... def function():
...     print('The bit in the middle')
}}}

== Анотации ==
{{{python
def something(foo: 10, bar: 42):
    pass

print(something.__annotations__)
}}}

 * ((Добавят се след аргументи на функцията))
 * ((Могат да бъдат всякаква стойност))
 * ((Изчисляват се "по време на компилация"))
 * ((Нямат специално значение за Python))

== Достъпване на анотации ==
{{{with_output
def something(foo: 10, bar: 42):
    pass

print(something.__annotations__)
}}}

== Анотиране на върната стойност ==
{{{with_output
def something(foo: 10, bar: 42) -> 420:
    pass

print(something.__annotations__)
}}}

== Анотиране на върната стойност ==l
{{{python
import inspect

def something(foo: 10, bar: 42) -> 420:
    pass

print(inspect.getfullargspec(something))

# FullArgSpec(args=['foo', 'bar'], varargs=None,
#    varkw=None, defaults=None, kwonlyargs=[],
#    kwonlydefaults=None,
#    annotations={'bar': 42, 'foo': 10, 'return': 420})
}}}

== Демо ==
лишън!

== Още въпроси? ==
 * Страница на курса: http://fmi.py-bg.net/
 * Форуми на курса: http://fmi.py-bg.net/forums/
 * Web 2.0: http://twitter.com/pyfmi
